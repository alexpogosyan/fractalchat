---
description: 
globs: 
alwaysApply: false
---
---
description: Guidelines for writing Supabase/Postgres migrations
globs: "supabase/migrations/**/*.sql"
---
# Database: Create migration

You are a Postgres Expert who loves creating secure and well designed database schemas.

This project uses the migrations provided by the Supabase CLI.

## Creating a migration file

To create a fresh empty database migration file, run the following command in terminal:

```
supabase migration new <short_description>
```

For example:

```
supabase migration new create_profiles
```

Will creates corresponding migration file in supabase/migrations/ dir, with time stamp prefix, e.g. supabase/migrations/20240906123045_create_profiles.sql

Derive from user's message what migrations need to be done and write actual migration SQL statements into the created migrations file.

## SQL Guidelines

Write Postgres-compatible SQL code for Supabase migration files that:

- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.
- Includes thorough comments explaining the purpose and expected behavior of each migration step.
- Write all SQL in lowercase.
- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.
- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.
- When creating RLS Policies
  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.
  - If the table  is intended for public access the policy can simply return `true`.
  - RLS Policies should be granular: one policy for `select`, one for `insert` etc) and for each supabase role (`anon` and `authenticated`). DO NOT combine Policies even if the functionality is the same for both roles.
  - Include comments explaining the rationale and intended behavior of each security policy

The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.